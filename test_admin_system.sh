#!/bin/bash

# Script de prueba para el sistema de administraci√≥n
# Prueba: Admin por defecto, cambio de roles, y funcionalidades de admin

# Configuraci√≥n
BASE_URL="http://localhost:8080"
ADMIN_EMAIL="admin@system.com"
ADMIN_PASSWORD="admin123"
STUDENT_EMAIL="estudiante@test.com"
STUDENT_PASSWORD="password123"

echo "üß™ PRUEBAS DEL SISTEMA DE ADMINISTRACI√ìN"
echo "========================================"

# Funci√≥n para mostrar el estado de la aplicaci√≥n
check_app_status() {
    echo "üîç Verificando estado de la aplicaci√≥n..."
    if curl -s "$BASE_URL/api/public/health" > /dev/null 2>&1; then
        echo "‚úÖ Aplicaci√≥n est√° ejecut√°ndose"
        return 0
    else
        echo "‚ùå Aplicaci√≥n no est√° ejecut√°ndose en $BASE_URL"
        echo "   Ejecuta: cd Backend/Dev-learning-Platform && mvn spring-boot:run"
        return 1
    fi
}

# Funci√≥n para hacer login y obtener token
login_and_get_token() {
    local email=$1
    local password=$2
    local token_var=$3
    
    echo "üîê Autenticando $email..."
    local response=$(curl -s -X POST "$BASE_URL/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$email\",\"password\":\"$password\"}")
    
    if echo "$response" | grep -q "accessToken"; then
        local token=$(echo "$response" | grep -o '"accessToken":"[^"]*"' | cut -d'"' -f4)
        eval "$token_var=\"$token\""
        echo "‚úÖ Login exitoso para $email"
        return 0
    else
        echo "‚ùå Error en login para $email: $response"
        return 1
    fi
}

# Funci√≥n para registrar un usuario
register_user() {
    local email=$1
    local password=$2
    local userName=$3
    local lastName=$4
    local role=$5
    
    echo "üìù Registrando usuario $email..."
    local response=$(curl -s -X POST "$BASE_URL/api/auth/register" \
        -H "Content-Type: application/json" \
        -d "{\"userName\":\"$userName\",\"lastName\":\"$lastName\",\"email\":\"$email\",\"password\":\"$password\",\"role\":\"$role\"}")
    
    if echo "$response" | grep -q "id"; then
        echo "‚úÖ Usuario registrado exitosamente"
        return 0
    else
        echo "‚ùå Error al registrar usuario: $response"
        return 1
    fi
}

# Funci√≥n para obtener todos los usuarios (solo admin)
get_all_users() {
    local token=$1
    echo "üë• Obteniendo lista de usuarios..."
    local response=$(curl -s -X GET "$BASE_URL/api/users/all" \
        -H "Authorization: Bearer $token")
    
    if echo "$response" | grep -q "id"; then
        echo "‚úÖ Lista de usuarios obtenida"
        echo "$response" | jq '.' 2>/dev/null || echo "$response"
        return 0
    else
        echo "‚ùå Error al obtener usuarios: $response"
        return 1
    fi
}

# Funci√≥n para cambiar rol de usuario
change_user_role() {
    local admin_token=$1
    local user_id=$2
    local new_role=$3
    
    echo "üîÑ Cambiando rol del usuario $user_id a $new_role..."
    local response=$(curl -s -X PUT "$BASE_URL/api/users/$user_id/role" \
        -H "Authorization: Bearer $admin_token" \
        -H "Content-Type: application/json" \
        -d "{\"role\":\"$new_role\"}")
    
    if echo "$response" | grep -q "id"; then
        echo "‚úÖ Rol cambiado exitosamente"
        echo "$response" | jq '.' 2>/dev/null || echo "$response"
        return 0
    else
        echo "‚ùå Error al cambiar rol: $response"
        return 1
    fi
}

# Funci√≥n para obtener informaci√≥n del usuario actual
get_current_user() {
    local token=$1
    echo "üë§ Obteniendo informaci√≥n del usuario actual..."
    local response=$(curl -s -X GET "$BASE_URL/api/users/me" \
        -H "Authorization: Bearer $token")
    
    if echo "$response" | grep -q "id"; then
        echo "‚úÖ Informaci√≥n del usuario obtenida"
        echo "$response" | jq '.' 2>/dev/null || echo "$response"
        return 0
    else
        echo "‚ùå Error al obtener informaci√≥n del usuario: $response"
        return 1
    fi
}

# Verificar que la aplicaci√≥n est√© ejecut√°ndose
if ! check_app_status; then
    exit 1
fi

echo ""
echo "1Ô∏è‚É£ PRUEBA: Login del admin por defecto"
echo "----------------------------------------"
ADMIN_TOKEN=""
if login_and_get_token "$ADMIN_EMAIL" "$ADMIN_PASSWORD" "ADMIN_TOKEN"; then
    echo "‚úÖ Admin por defecto funciona correctamente"
    echo "   Token: ${ADMIN_TOKEN:0:20}..."
else
    echo "‚ùå Error: No se pudo autenticar al admin por defecto"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£ PRUEBA: Verificar informaci√≥n del admin"
echo "-------------------------------------------"
get_current_user "$ADMIN_TOKEN"

echo ""
echo "3Ô∏è‚É£ PRUEBA: Obtener lista de usuarios (solo admin)"
echo "------------------------------------------------"
get_all_users "$ADMIN_TOKEN"

echo ""
echo "4Ô∏è‚É£ PRUEBA: Registrar un estudiante"
echo "----------------------------------"
if register_user "$STUDENT_EMAIL" "$STUDENT_PASSWORD" "Juan" "Estudiante" "STUDENT"; then
    echo "‚úÖ Estudiante registrado correctamente"
else
    echo "‚ùå Error al registrar estudiante"
    exit 1
fi

echo ""
echo "5Ô∏è‚É£ PRUEBA: Login del estudiante"
echo "-------------------------------"
STUDENT_TOKEN=""
if login_and_get_token "$STUDENT_EMAIL" "$STUDENT_PASSWORD" "STUDENT_TOKEN"; then
    echo "‚úÖ Estudiante puede hacer login correctamente"
    echo "   Token: ${STUDENT_TOKEN:0:20}..."
else
    echo "‚ùå Error: No se pudo autenticar al estudiante"
    exit 1
fi

echo ""
echo "6Ô∏è‚É£ PRUEBA: Verificar que estudiante NO puede acceder a funciones de admin"
echo "------------------------------------------------------------------------"
echo "üîí Intentando acceder a lista de usuarios como estudiante..."
response=$(curl -s -X GET "$BASE_URL/api/users/all" \
    -H "Authorization: Bearer $STUDENT_TOKEN")

if echo "$response" | grep -q "403\|Forbidden\|Access denied"; then
    echo "‚úÖ Estudiante correctamente bloqueado de funciones de admin"
else
    echo "‚ùå Error: Estudiante pudo acceder a funciones de admin"
    echo "   Respuesta: $response"
fi

echo ""
echo "7Ô∏è‚É£ PRUEBA: Obtener ID del estudiante para cambio de rol"
echo "------------------------------------------------------"
echo "üîç Buscando ID del estudiante en la lista de usuarios..."
response=$(curl -s -X GET "$BASE_URL/api/users/all" \
    -H "Authorization: Bearer $ADMIN_TOKEN")

# Extraer ID del estudiante (asumiendo que es el segundo usuario despu√©s del admin)
STUDENT_ID=$(echo "$response" | grep -o '"id":[0-9]*' | tail -1 | cut -d':' -f2)
if [ -n "$STUDENT_ID" ]; then
    echo "‚úÖ ID del estudiante encontrado: $STUDENT_ID"
else
    echo "‚ùå No se pudo encontrar el ID del estudiante"
    exit 1
fi

echo ""
echo "8Ô∏è‚É£ PRUEBA: Cambiar rol del estudiante a INSTRUCTOR"
echo "------------------------------------------------"
if change_user_role "$ADMIN_TOKEN" "$STUDENT_ID" "INSTRUCTOR"; then
    echo "‚úÖ Rol cambiado de STUDENT a INSTRUCTOR"
else
    echo "‚ùå Error al cambiar rol"
    exit 1
fi

echo ""
echo "9Ô∏è‚É£ PRUEBA: Verificar cambio de rol"
echo "---------------------------------"
echo "üîç Verificando que el rol cambi√≥ correctamente..."
response=$(curl -s -X GET "$BASE_URL/api/users/all" \
    -H "Authorization: Bearer $ADMIN_TOKEN")

if echo "$response" | grep -q "\"role\":\"INSTRUCTOR\""; then
    echo "‚úÖ Rol cambiado correctamente a INSTRUCTOR"
else
    echo "‚ùå Error: El rol no se cambi√≥ correctamente"
    echo "   Respuesta: $response"
fi

echo ""
echo "üîü PRUEBA: Login del usuario con nuevo rol"
echo "-----------------------------------------"
echo "üîê Verificando que el usuario puede hacer login con su nuevo rol..."
if login_and_get_token "$STUDENT_EMAIL" "$STUDENT_PASSWORD" "NEW_TOKEN"; then
    echo "‚úÖ Usuario puede hacer login con su nuevo rol INSTRUCTOR"
    get_current_user "$NEW_TOKEN"
else
    echo "‚ùå Error: Usuario no puede hacer login despu√©s del cambio de rol"
fi

echo ""
echo "üèÅ PRUEBAS COMPLETADAS"
echo "====================="
echo "‚úÖ Admin por defecto funciona correctamente"
echo "‚úÖ Sistema de roles funciona correctamente"
echo "‚úÖ Cambio de roles funciona correctamente"
echo "‚úÖ Seguridad de endpoints funciona correctamente"
echo ""
echo "üìã RESUMEN DE FUNCIONALIDADES VERIFICADAS:"
echo "   ‚Ä¢ Admin por defecto: admin@system.com / admin123"
echo "   ‚Ä¢ Login como estudiante y profesor"
echo "   ‚Ä¢ Cambio de roles (STUDENT ‚Üí INSTRUCTOR)"
echo "   ‚Ä¢ Control de acceso basado en roles"
echo "   ‚Ä¢ Endpoints protegidos funcionando"
echo ""
echo "üéâ ¬°Sistema funcionando correctamente!"
